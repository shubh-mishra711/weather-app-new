import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './cc.css';
import { MapContainer, TileLayer, Marker } from 'react-leaflet';

const CurrencyConverter = () => {
  const [amount, setAmount] = useState(1);
  const [fromCurrency, setFromCurrency] = useState('USD');
  const [toCurrency, setToCurrency] = useState('CAD');
  const [convertedAmount, setConvertedAmount] = useState(0);
  const [error, setError] = useState('');
  const [countryDetails, setCountryDetails] = useState(null);
  const [countries, setCountries] = useState([]);
  const [weather, setWeather] = useState(null);
  const [placeInfo, setPlaceInfo] = useState('');
  const [mapCenter, setMapCenter] = useState([0, 0]);
  const [mapZoom, setMapZoom] = useState(1);
  const [topCitiesWeather, setTopCitiesWeather] = useState([]);

  useEffect(() => {
    convertCurrency();
  }, [amount, fromCurrency, toCurrency]);

  useEffect(() => {
    if (toCurrency) {
      fetchCountryDetails(toCurrency);
    }
  }, [toCurrency]);

  useEffect(() => {
    if (countryDetails) {
      fetchTopCitiesWeather(countryDetails.latlng);
      fetchPlaceInfo(countryDetails.name.common);
    }
  }, [countryDetails]);

  const convertCurrency = async () => {
    setError('');

    const apiKey = 'YOUR_API_KEY'; // Replace with your API key
    const apiUrl = `https://api.exchangerate-api.com/v4/latest/${fromCurrency}`;

    try {
      const response = await axios.get(apiUrl);

      if (response.status === 200) {
        const { rates } = response.data;
        const conversionRate = rates[toCurrency];
        const convertedAmount = amount * conversionRate;
        setConvertedAmount(convertedAmount.toFixed(2));
        fetchCountriesByCurrency(toCurrency);
      } else {
        setError('Currency conversion failed.');
      }
    } catch (error) {
      setError('Failed to fetch currency rates.');
    }
  };

  const fetchCountryDetails = async (currencyCode) => {
    try {
      const response = await axios.get(`https://restcountries.com/v3.1/currency/${currencyCode}`);
      if (response.status === 200) {
        const countryData = response.data[0];
        setCountryDetails(countryData);
      }
    } catch (error) {
      console.error('Failed to fetch country details:', error);
    }
  };

  const fetchCountriesByCurrency = async (currencyCode) => {
    try {
      const response = await axios.get(`https://restcountries.com/v3.1/currency/${currencyCode}`);
      if (response.status === 200) {
        setCountries(response.data);
      }
    } catch (error) {
      console.error('Failed to fetch countries:', error);
    }
  };

  const fetchTopCitiesWeather = async () => {
  const apiKey = 'f4df215b2d6889811eee837bb7889650'; // Replace with your API key
  const { name, latlng , capital } = countryDetails;
  
  if (latlng.length === 2) {
    const apiUrl = `https://api.openweathermap.org/data/2.5/find?lat=${latlng[0]}&lon=${latlng[1]}&cnt=5&appid=${apiKey}&units=metric`;
    
    try {
      const response = await axios.get(apiUrl);
      if (response.status === 200) {
        const topCitiesWeatherData = response.data.list;
        setTopCitiesWeather(topCitiesWeatherData);
        setWeather(topCitiesWeatherData[0]);
      }
    } catch (error) {
      console.error('Failed to fetch top cities weather:', error);
    
    }
  
  }
};


  const fetchPlaceInfo = async (countryName) => {
    try {
      const response = await axios.get(
        `https://en.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(countryName)}`
      );
      if (response.status === 200) {
        setPlaceInfo(response.data.extract);
        fetchMapCoordinates(countryName);
      }
    } catch (error) {
      console.error('Failed to fetch place information:', error);
    }
  };

  

  const handleAmountChange = (e) => {
    const newAmount = Math.max(0, e.target.value); // Ensure the new amount is not below 0
    setAmount(newAmount);
  };

  const handleFromCurrencyChange = (e) => {
    setFromCurrency(e.target.value);
  };

  const handleToCurrencyChange = (e) => {
    setToCurrency(e.target.value);
  };

  const handleCountryChange = (e) => {
    const selectedCountryCode = e.target.value;
    const selectedCountry = countries.find((country) => country.cca3 === selectedCountryCode);
    setCountryDetails(selectedCountry);
    setWeather(null);
  };

  const handleConvertClick = () => {
    convertCurrency();
  };

  return (
    <div className="background">
      <div className="container">
        <div className="Currency">
          <h1 className="title">Currency Converter</h1>
          <div className="form-group">
            <label className="label">Amount:</label>
            <input className="input" type="number" value={amount} onChange={handleAmountChange} />
          </div>
          <div className="form-group">
            <label className="label">From:</label>
            <select className="select" value={fromCurrency} onChange={handleFromCurrencyChange}>
              <option value="USD">USD</option>
              <option value="EUR">EUR</option>
              <option value="GBP">GBP</option>
              <option value="INR">INR</option>
              <option value="JPY">JPY</option>
              <option value="CAD">CAD</option>
              {/* Add more currency options as needed */}
            </select>
          </div>
          <div className="form-group">
            <label className="label">To:</label>
            <select className="select" value={toCurrency} onChange={handleToCurrencyChange}>
              <option value="">Select Currency</option>
              <option value="JPY">JPY</option>
              <option value="CAD">CAD</option>
              <option value="CNY">CNY</option>
              <option value="CHF">CHF</option>
              <option value="NZD">NZD</option>
              <option value="GBP">GBP</option>
              <option value="AUD">AUD</option>
              <option value="INR">INR</option>
              <option value="IDR">IDR</option>
              {/* Add more currency options as needed */}
            </select>
          </div>
          <button className="button" onClick={handleConvertClick} disabled={!toCurrency}>
            Convert
          </button>
          {error && <div className="error">{error}</div>}
          <div className="result">
            Converted Amount: {convertedAmount} {toCurrency}
          </div>
        </div>
        {countries.length > 0 && (
          <div className="country-dropdown">
            <label className="label">Select a Country:</label>
            <select className="select" onChange={handleCountryChange}>
              <option value="">Select Country</option>
              {countries.map((country) => (
                <option key={country.cca3} value={country.cca3}>
                  {country.name.common}
                </option>
              ))}
            </select>
          </div>
        )}
        {countryDetails && (
          <div className="country-details">
            <h2 className="country-details-heading">Country Details</h2>
            <div className="country-details-content">
              <div className="flag-container">
                <img
                  src={countryDetails.flags.png}
                  alt={countryDetails.name.common}
                  className="country-flag"
                />
              </div>
              <div className="country-details-info">
                <p>Name: {countryDetails.name.common}</p>
                <p>Capital: {countryDetails.capital[0]}</p>
                <p>Population: {countryDetails.population}</p>
                {/* Add more country details as needed */}
              </div>
            </div>
          </div>
        )}
        {weather !== null && (
          <div className="top-cities-weather">
            <h2 className="top-cities-heading">Weather Details</h2>
            <div className="city-weather">
              <div className="city-weather-item-0">
                <h3>{countryDetails.capital[0]}</h3>
                <div className="weather-icon-container">
                <img
                  src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}
                  alt="Weather Icon"
                  className="weather-icon"
                />
              </div>
                <p>Temperature: {weather.main.temp}°C</p>
                <p>Weather: {weather.weather[0].description}</p>
                {/* Add more weather details as needed */}
              </div>
              {topCitiesWeather.slice(1).map((cityWeather, index) => (
                <div className="city-weather-item" key={index}>
                  <h3>{cityWeather.name}</h3>
                  <p>Temperature: {cityWeather.main.temp}°C</p>
                  <p>Weather: {cityWeather.weather[0].description}</p>
                  {/* Add more weather details as needed */}
                </div>
              ))}
            </div>
          </div>
        )}
        
        
        
        
        {placeInfo && (
          <div className="place-info">
            <h2 className="place-info-heading">Place Information</h2>
            <p className="place-info-content">{placeInfo}</p>
            <div className="map-container">
              <iframe
                title="Map"
                width="300"
                height="200"
                src={`https://maps.google.com/maps?q=${mapCenter[0]},${mapCenter[1]}&z=6&output=embed`}
              />
            </div>
          </div>
        )}
        
      </div>
    </div>
  );
};

export default CurrencyConverter;
